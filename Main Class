/*
 * File: Yahtzee.java
 * ------------------
 * This program will SUCCESSFULLY play the Yahtzee game.
 */

import acm.io.*;
import acm.program.*;
import acm.util.*;

public class Yahtzee extends GraphicsProgram implements YahtzeeConstants {
	
	public static void main(String[] args) {
		new Yahtzee().start(args);
	}
	
	public void run() {
		IODialog dialog = getDialog();
		while(true){
			nPlayers = dialog.readInt("Enter number of players");
			selectedCategories = new boolean[nPlayers+1][N_CATEGORIES+1];
			allScores = new int[nPlayers+1][N_CATEGORIES+1];
			//If the players entered is less than the max, then we're fine and we can break out of the loop
			if (nPlayers <= MAX_PLAYERS) break;
			//If not, the loop reaches this point and the user is informed that you can only have a certain amount of players.
			dialog.println("The maximum of players is " + MAX_PLAYERS + " players.");
		}
		playerNames = new String[nPlayers];
		for (int i = 1; i <= nPlayers; i++) {
			playerNames[i - 1] = dialog.readLine("Enter name for player " + i);
		}
		display = new YahtzeeDisplay(getGCanvas(), playerNames);
		playGame();
	}

	private void playGame() {
		/*Runs as many times as necessary to put a value into a certain category, N_SCORING_CATEGORIES is basically the # of rounds */
		for (int i = 0; i < N_SCORING_CATEGORIES; i++){
			//nested for loops switches between players each turn
			for (int j = 1; j <= nPlayers; j++){
				initializeFirstRoll(j);
				rollTwoMoreTimes(j);
				pickAndScoreCategory(j);
			}
		}
		calcResults();
		showWin();
	}
	
	/** Displays opening messages, then generates 5 random values between 1 and 6 for each die
	 * This method displays the die at the end of the roll.
	 * @param player: intakes the number of the player
	 */
	private void initializeFirstRoll(int player){
		display.printMessage("It's now " + playerNames[player-1] + "'s turn! Roll the dice to begin by clicking \"Roll Dice\" ");
		display.waitForPlayerToClickRoll(player);
		for(int i = 0; i < N_DICE; i++){
			dice[i] = rgen.nextInt(1,6);
		}
		display.displayDice(dice);
	}
	
	/** The player has the option to select and deselect dice before the chosen die are rolled.
	 * At the end of the 3rd roll, the user is informed that their turn is over
	 * @param player: intakes the number of the player
	 */
	private void rollTwoMoreTimes(int player) {
		for (int i = 0; i < 2; i++){
			display.printMessage("Select the dice you wish to reroll and click \"Roll Again!\" ");
			display.waitForPlayerToSelectDice();
			rollChosenDie();
		}
		display.printMessage("Your turn is now over! Please select a category for this roll (you don't have a choice).");
	}
	
	/** This method goes through each of the dice and sees if the player has selected that die. If yes (true), then a new value is generated for that die.
	 * The new array of dice is then displayed. 
	 */
	private void rollChosenDie(){
		for(int i = 0; i < N_DICE; i++){
			if(display.isDieSelected(i)==true){
				int roll = rgen.nextInt(1,6);
				dice[i] = roll;
			}
		}
		display.displayDice(dice);
	}
	
	/** After rolling the dice 3 times, this method is called.
	 * This method checks that the category hasn't been selected before actually calculating the score that category should receive.
	 * The scorecard is then updated with the calculated score for that category. The total is also updated (both in the array and scorecard).
	 * @param player: intakes player #
	 */
	private void pickAndScoreCategory(int player){
		checkBeforeScoreCategory(player);
		display.updateScorecard(category, player, allScores[player-1][category]);
		updateTotal(player);
	}
	
	/** This loop makes sure that the category picked hasn't been picked yet by continuing to go through a loop that only breaks out when an unselected category is picked.
	 * Once an unselected category has been picked, the score for that category is calculated and the loop is broken out of. 
	 * At the end of the method, the category selected is noted as picked with the boolean "true"
	 * @param player: intakes player #
	 */
	private void checkBeforeScoreCategory(int player){
		while (true){
			category = display.waitForPlayerToSelectCategory();
			if (selectedCategories[player-1][category] == false) {
				calcScore(player, category);
				break;
			} else {
				//If selected category is true, that means it has already been selected.
				display.printMessage("YOU ALREADY PICKED THIS CATEGORY. Get it together and try again.");
			}
			
		}
		selectedCategories[player-1][category] = true;
	}
	
	/** This method checks whether the dice match the requirements for the maximum amount of points of the selected category.
	 * @param dice: current array of dice
	 * @param category: category selected by player
	 * @param player: current player number
	 * @return: boolean that indicates if the player has met the requirements for that category
	 */
	private boolean checkCategoryReq(int[] dice, int category, int player){
		boolean meetsReq = false;

		//Vikram Pattabi helped come up with a method to check a category
		//dieValues is an array that stores the value held on the dice
		int[] dieValues = new int[7];
		//Adds 1 under the index of the value of the dice ex) if dice has a 3 on a roll; then dieValues[3] = 1;
		for (int i = 0; i < N_DICE; i++){
			dieValues[dice[i]] += 1;
		}
		
		//This statement checks the category inputted with a switch statement.
		switch (category){
		//Ones - sixes and chance have no requirement so meetsReq is true.
			case(ONES): case(TWOS): case(THREES):case(FOURS): 
			case(FIVES): case(SIXES): case(CHANCE):
				meetsReq = true; break;
		
		//Three of a kind requires that there be at least 3 of one value. 
			case(THREE_OF_A_KIND):
				for (int i = 0; i < dieValues.length; i++){
					if (dieValues[i] >= 3) {
						meetsReq = true;
					}
				} break;
		//Four of a kind requires that there be at least 4 of one value.
			case(FOUR_OF_A_KIND):
				for (int i = 0; i < dieValues.length; i++){
					if (dieValues[i] >= 4) {
						meetsReq = true;
					} 
				} break;
				
		//Full House requires 3 of one value, and two of another.
			case(FULL_HOUSE):
				if (dieValues[1]==3 || dieValues[2]==3 || dieValues[3]==3 || 
				dieValues[4]==3 || dieValues[5]==3 || dieValues[6]==3){
					if (dieValues[1]== 2 || dieValues[2]== 2 || dieValues[3]== 2 || 
						dieValues[4]== 2 || dieValues[5]==2 || dieValues[6]==2) {
							meetsReq = true;
					}
				} break;
				
		// Small straight requires at least 1 of a number in a consecutive fashion for four of the die.
			case(SMALL_STRAIGHT):
				if (dieValues[1]>=1 && dieValues[2]>=1 && dieValues[3]>= 1 && 
				dieValues[4]>= 1) {
					meetsReq = true;
				} else if (dieValues[2]>=1 && dieValues[3]>=1 && dieValues[4]>= 1 && 
						dieValues[5]>= 1 ) {
					meetsReq = true;
				} else if (dieValues[3]>=1 && dieValues[4]>= 1 &&
						dieValues[5]>= 1 && dieValues[6]>= 1) {
				meetsReq = true;
				}
			
		//Large straight requires at least 1 of a number in a consecutive fashion for five of the die.
			case(LARGE_STRAIGHT):
				if (dieValues[1]>=1 && dieValues[2]>=1 && dieValues[3]>= 1 && 
					dieValues[4]>= 1 && dieValues[5]>= 1) {
						meetsReq = true;
				} else if (dieValues[2]>=1 && dieValues[3]>=1 && dieValues[4]>= 1 && 
						dieValues[5]>= 1 && dieValues[6]>= 1) {
					meetsReq = true;
				}
			
		//Yahtzee requires five of one value.
			case(YAHTZEE):
				for (int i = 0; i < dieValues.length; i++){
					if (dieValues[i] == 5) {
						meetsReq = true;
					} 
				} break;
				
		//Default case is to break.
			default: break;
		}	
		return meetsReq;
	}
		
	/** This method includes the way to calculate the score or the scores for each category given that
	 * the dice match the requirements for the category. This method also sets the score in the respective category 
	 * given that the requirements for the category are met.
	 * 
	 * @param player: the current player #
	 * @param category: the category selected by the player
	 */
	private void calcScore(int player, int category){
		if (checkCategoryReq(dice, category, player) == true) { 
			//Checks categories, ONES, TWOS, THREES, FOURS, FIVES, and SIXES
			//checks if dice matches the category (1-6 of course), and adds that number to the score for that category if it does. 
			if (category >= ONES && category <= SIXES) {
				for (int i = 0; i < N_DICE; i++) {
					if (dice[i] == category) {
						allScores[player-1][category] += category;
					}
				}
			}
			
			//Full houses are worth 25 pts, Small straights are worth 30 pts, Large Straights are worth 40 pts.
			if (category == FULL_HOUSE) allScores[player-1][category] = 25;
			if (category == SMALL_STRAIGHT) allScores[player-1][category] = 30;
			if (category == LARGE_STRAIGHT) allScores[player-1][category] = 40;
			
			//If the requirements are met for these categories, the score is just the sum of the dice.
			if (category == THREE_OF_A_KIND || category == FOUR_OF_A_KIND || category == CHANCE){
				for (int i = 0; i < N_DICE; i++){
					allScores[player-1][category] += dice[i];
				}
			}
			
			//Yahtzee is worth 50 pts.
			if (category == YAHTZEE) allScores[player-1][category] = 50;
		}
	}

/** This method updates the total score. It adds the score in each category before total and stores it as the
 * total value in each player's score array. */
	private void updateTotal(int player){
		//The total score is initialized to zero.
		int totalscore = 0;
		for (int i = 0; i < allScores[player-1].length-1; i++){
			//Total score is the sum of all the categories above total.
			totalscore += allScores[player-1][i];
			//Stores the new total score in the array for scores:
			allScores[player-1][TOTAL] = totalscore;
		}
		//Shows new total on scorecard:
		display.updateScorecard(TOTAL, player, allScores[player-1][TOTAL]);
	}
	

	/** After the end of all the rounds for each player, the results of the entire game are calculated.
	 * The upper score, upper bonus, lower score, and total are all calculated and displayed on the scoreboard.
	 */
	private void calcResults(){
		for (int i = 1; i <= nPlayers; i++){
			calcUpperScore(i);
			checkUpperBonus(i);
			calcLowerScore(i);
			updateTotal(i);
		}
	}
	
	/** Calculates the upper score by summing all of the categories on top (ones to sixes). Updates array and scoreboard at the end of the math calculation.
	 * @param player: player #
	 */
	private void calcUpperScore(int player){
		int upperScore = 0;
		for (int cat = ONES; cat <= SIXES; cat++){
			upperScore += allScores[player-1][cat];
		}
		allScores[player-1][UPPER_SCORE] = upperScore;
		display.updateScorecard(UPPER_SCORE, player, upperScore);
	}
	
	/** Upperbonus is initialized to 0, if upper score is greater than 63, upper bonus becomes 35. Updates array and scoreboard at the end of the method.
	 * @param player: player #
	 */
	private void checkUpperBonus(int player){
		int upperBonus = 0;
		if (allScores[player-1][UPPER_SCORE] >= 63){
			upperBonus = 35;
		}
		allScores[player-1][UPPER_BONUS] = upperBonus;
		display.updateScorecard(UPPER_BONUS, player, upperBonus);
	}
	
	/** Lower score is initialized to be 0, then it adds the value of every category in the lower region (three of a kind to chance)
	 * The player's array and scorecard are updated at the end of the method to be the value calculated.
	 * @param player: player #
	 */
	private void calcLowerScore(int player){
		int lowerScore = 0;
		for (int cat = THREE_OF_A_KIND; cat <= CHANCE; cat++){
			lowerScore += allScores[player-1][cat];
		}
		allScores[player-1][LOWER_SCORE] = lowerScore;
		display.updateScorecard(LOWER_SCORE, player, lowerScore);
	}
	
	/** Determines winner by comparing the total scores between each all of the players.
	 * The winning score is the winning player's total.
	 */
	private void showWin(){
		String winner = "";
		int winnerScore = 0;
		for (int i = 0; i < nPlayers; i++){
			if(allScores[i][TOTAL] > winnerScore){
				winnerScore = allScores[i][TOTAL];
				winner = playerNames[i];
			}
		}
		display.printMessage("Congratulations "+winner+", you've won! Yay...give yourself a pat on the back.");
	}
	
/* Private instance variables */
	private int nPlayers;
	private String[] playerNames;
	private YahtzeeDisplay display;
	private RandomGenerator rgen = new RandomGenerator();
	private int category;
	//Array for the dice that you have:
	private int[] dice = new int[N_DICE];
	//Two dimensional array that show if a category has already been selected
	private boolean[][] selectedCategories;
	//Two dimensional array that show all the scores for each player
	private int[][] allScores;
}
